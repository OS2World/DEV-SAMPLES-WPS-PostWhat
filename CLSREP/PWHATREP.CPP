
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.47
 */


/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using:
 *      SOM Emitter emitxtm: 2.47
 */

#ifndef SOM_Module_postwhatrep_Source
#define SOM_Module_postwhatrep_Source
#endif
#define PostWhatRep_Class_Source
#define M_PostWhatRep_Class_Source

#define _RETAIL /* to completely eliminate the ...MethodDebug(...) debugging output to SOMOutCharRoutine (default:stdout) */
#include "pwhatrep.xih"
#include "rc.h"
#include <wpclsmgr.xh>

HMODULE     g_hModule   = NULLHANDLE;

ULONG APIENTRY _DLL_InitTerm(ULONG modhandle,ULONG flag)
{
    if(flag == 0)
    {
#ifndef __IMPORTLIB__
        if (_CRT_init())
        {
            return 0; /* fail */
        }
#endif
#ifdef __cplusplus
        __ctordtorInit();
#endif
        g_hModule   = modhandle;
        return 1;
    }
    else if (flag == 1)
    {
#ifdef __cplusplus
        __ctordtorTerm();
#endif

#ifndef __IMPORTLIB__
        _CRT_term();
#endif
        return 1; /* success */
    }
    else
    {
        return 0;
    }
}

SOMEXTERN VOID SOMLINK SOMInitModule(long majorVersion,long minorVersion, string className)
{
    SOM_IgnoreWarning(majorVersion);
    SOM_IgnoreWarning(minorVersion);
    SOM_IgnoreWarning(className);
    PostWhatRepNewClass(PostWhatRep_MajorVersion,PostWhatRep_MinorVersion);
    return;
}


MRESULT EXPENTRY TestProc(HWND hwndMLE,ULONG msg,MPARAM mp1,MPARAM mp2)
{
    PBASEWNDWORDS pBase;
    HWND hwndFrame,hwndTitleBar,hwndMenu;
    MRESULT mres;

    hwndFrame       = WinQueryWindow(hwndMLE,QW_PARENT);
    hwndTitleBar    = WinWindowFromID(hwndFrame,FID_TITLEBAR);
    hwndMenu        = WinWindowFromID(hwndFrame,FID_MENU);


    pBase = _PostWhatRep->wpclsGetPerViewData(hwndMLE,TestProc);

    switch(msg)
    {
        case WM_INIT:
            if ((pBase = _PostWhatRep->wpclsAllocPerViewData(hwndMLE,msg,mp1,mp2,TestProc,NULL,0UL)) == NULL)
            {
                WinDestroyWindow(hwndFrame);
            }
            else
            {
                CHAR presParam[FACESIZE+16]={0};
                RGB2 rgb2Value;
                BOOL bRC;
                PULONG prgb2Value = (PULONG)&rgb2Value;

                *prgb2Value = 0x00FF6464;
                bRC = WinSetPresParam(hwndMLE,PP_BACKGROUNDCOLOR,sizeof(rgb2Value),&rgb2Value);

                *prgb2Value = 0x00FF6464;
                bRC = WinSetPresParam(hwndMLE,PP_FIELDBACKGROUNDCOLOR,sizeof(rgb2Value),&rgb2Value);

                /*
                * This does not seem to have any effect
                * *prgb2Value = 0x00F4AA8F;
                * bRC = WinSetPresParam(hwndMLE,PP_HILITEBACKGROUNDCOLOR,sizeof(rgb2Value),&rgb2Value);
                */

                strcpy(presParam,"8.Helv");
                bRC = WinSetPresParam(hwndMLE,PP_FONTNAMESIZE,sizeof(presParam),presParam);

                *prgb2Value = RGB_BLACK;
                bRC = WinSetPresParam(hwndTitleBar,PP_ACTIVETEXTFGNDCOLOR,sizeof(rgb2Value),&rgb2Value);
                bRC = WinSetPresParam(hwndMenu,PP_MENUFOREGROUNDCOLOR,sizeof(rgb2Value),&rgb2Value);

                *prgb2Value = 0x00FF6464;
                bRC = WinSetPresParam(hwndFrame,PP_ACTIVECOLOR,sizeof(rgb2Value),&rgb2Value);
                bRC = WinSetPresParam(hwndTitleBar,PP_ACTIVECOLOR,sizeof(rgb2Value),&rgb2Value);
                bRC = WinSetPresParam(hwndTitleBar,PP_ACTIVETEXTBGNDCOLOR,sizeof(rgb2Value),&rgb2Value);
                bRC = WinSetPresParam(hwndMenu,PP_MENUBACKGROUNDCOLOR,sizeof(rgb2Value),&rgb2Value);

                *prgb2Value = 0x00FFB4B4;
                bRC = WinSetPresParam(hwndFrame,PP_INACTIVECOLOR,sizeof(rgb2Value),&rgb2Value);
                bRC = WinSetPresParam(hwndTitleBar,PP_INACTIVECOLOR,sizeof(rgb2Value),&rgb2Value);
                bRC = WinSetPresParam(hwndTitleBar,PP_INACTIVETEXTBGNDCOLOR,sizeof(rgb2Value),&rgb2Value);
                bRC = WinSetPresParam(hwndMenu,PP_MENUHILITEBGNDCOLOR,sizeof(rgb2Value),&rgb2Value);

                *prgb2Value = 0x00CCCCCC;
                bRC = WinSetPresParam(hwndMenu,PP_MENUHILITEFGNDCOLOR,sizeof(rgb2Value),&rgb2Value);
            }
            return (MRESULT)0;

        case WM_DESTROY:
            /*
                call the replaced Window Proc FIRST to give the original window class a chance
                to free its data/do its cleanup !
                We cannot any longer call the replaces Window Proc once we freed our PerViewData
                as the PerViewData contains the address of the replaced Window Proc !
            */
            mres = _PostWhatRep->wpclsClassDefaultWindowProc(hwndMLE,msg,mp1,mp2,TestProc);
            _PostWhatRep->wpclsFreePerViewData(hwndMLE,TestProc);
            return mres;

        default:
            break;
    }

    return _PostWhatRep->wpclsClassDefaultWindowProc(hwndMLE,msg,mp1,mp2,TestProc);
}


SOM_Scope void SOMLINK somDefaultInit(PostWhatRep *somSelf, som3InitCtrl* ctrl)
{
    PostWhatRepData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    PostWhatRepMethodDebug("PostWhatRep","somDefaultInit");
    PostWhatRep_BeginInitializer_somDefaultInit;

    PostWhatRep_Init_PostWhat_somDefaultInit(somSelf, ctrl);

    /*
     * local PostWhatRep initialization code added by programmer
     */
}


SOM_Scope void SOMLINK somDestruct(PostWhatRep *somSelf, octet doFree,
                                   som3DestructCtrl* ctrl)
{
    PostWhatRepData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    PostWhatRepMethodDebug("PostWhatRep","somDestruct");
    PostWhatRep_BeginDestructor;

    /*
     * local PostWhatRep deinitialization code added by programmer
     */

    PostWhatRep_EndDestructor;
}


SOM_Scope HWND  SOMLINK wpOpen(PostWhatRep *somSelf, HWND hwndCnr,
                               ULONG ulView, ULONG param)
{
    HWND hwnd;

    /* PostWhatRepData *somThis = PostWhatRepGetData(somSelf); */
    PostWhatRepMethodDebug("PostWhatRep","wpOpen");

    hwnd = (PostWhatRep_parent_PostWhat_wpOpen(somSelf, hwndCnr,
                                               ulView, param));

    if (hwnd && (ulView == MENUID_POSTWHATVIEW))
    {
        somSelf->wpSubClassWindow(WinWindowFromID(hwnd,FID_CLIENT),TestProc);
    }
    return hwnd;
}


SOM_Scope ULONG  SOMLINK wpclsQueryIconData(M_PostWhatRep *somSelf,
                                            PICONINFO pIconInfo)
{
    /* M_PostWhatRepData *somThis = M_PostWhatRepGetData(somSelf); */
    M_PostWhatRepMethodDebug("M_PostWhatRep","wpclsQueryIconData");

    if (pIconInfo)
    {
        memset(pIconInfo,0,sizeof(*pIconInfo));
        pIconInfo->cb       = sizeof(*pIconInfo);
        pIconInfo->fFormat  = ICON_RESOURCE;
        pIconInfo->hmod     = g_hModule;
        pIconInfo->resid    = ID_MAIN;
    }
    return (sizeof(*pIconInfo));
}

SOM_Scope PSZ  SOMLINK wpclsQueryTitle(M_PostWhatRep *somSelf)
{
    /* M_PostWhatRepData *somThis = M_PostWhatRepGetData(somSelf); */
    M_PostWhatRepMethodDebug("M_PostWhatRep","wpclsQueryTitle");

    return "PostWhatRep";
}

